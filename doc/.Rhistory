ibrary("limma")
library("Glimma")
library("edgeR")
# Import the data.
setwd("~")
files <- scan(args[1],sep='\n',what="character")
dat <- readDGE(files, columns = c(1, 5))
test <- rep(0,50)
test[50]
test[1] <- 1
test <- matrix(rep(0,4),2)
test[1,1] <- 1
test[1,]
test
test[1,2] <- 2
test
test[,1]
sum(test[,1])
sum(test[1,])
?heatmap
test <- rep(0,50)
test[0]
c[1:(n-1)]
c[1:(50-1)]
devtools::install_version("tidyverse", version = "0.7.7", repos = "http://cran.us.r-project.org")
library(devtools)
install.packages('devtools')
install.packages("devtools")
devtools::install_github("hadley/tidyverse")
library(tidyverse)
library(hadley/tidyverse)
library('tidyverse')
packageVersion('tidyverse')
install.packages("tidyverse")
library(tidyverse)
packageVersion('tidyverse')
packageVersion('dplyr')
packageVersion('rlang')
knitr::opts_chunk$set(echo = TRUE)
setwd("~/SGBS_splicing")
DS_prev2 <- read.table("./resequenced_ds/pre_v_2days_cluster_significance.txt",sep="\t",header=TRUE, row.names=NULL,
check.names=FALSE)
DS_prev2 <- read.table("./resequenced_ds/pre_v_2days_cluster_significance.txt",sep="\t",header=TRUE, row.names=NULL,
check.names=FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(limma)
library(VennDiagram)
library(enrichR)
library(stringr)
library(ggplot2)
library(egg)
setwd("~/SGBS_splicing")
DE_prev2 <- read.table("./differential_expression/sgbs2vspre_all.txt", sep="\t", header=TRUE, row.names=NULL,
check.names=FALSE)
DE_2v8 <- read.table("./differential_expression/sgbs8vs2_all.txt", sep="\t", header=TRUE, row.names=NULL,
check.names=FALSE)
DE_8v16 <- read.table("./differential_expression/sgbs16vs8_all.txt", sep="\t", header=TRUE, row.names=NULL,
check.names=FALSE)
DS_prev2 <- read.table("./resequenced_ds/pre_v_2days_cluster_significance.txt",sep="\t",header=TRUE, row.names=NULL,
check.names=FALSE)
DS_prev2 <- DS_prev2[!is.na(DS_prev2$genes),]
DS_2v8 <- read.table("./resequenced_ds/2days_v_8days_cluster_significance.txt",sep="\t",header=TRUE, row.names=NULL,
check.names=FALSE)
DS_2v8 <- DS_2v8[!is.na(DS_2v8$genes),]
DS_8v16 <- read.table("./resequenced_ds/8days_v_16days_cluster_significance.txt",sep="\t",header=TRUE, row.names=NULL,
check.names=FALSE)
DS_8v16 <- DS_8v16[!is.na(DS_8v16$genes),]
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "~/SGBS_splicing")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/SGBS_splicing")
DS_prev2 <- read.table("./resequenced_ds/pre_v_2days_cluster_significance.txt",sep="\t",header=TRUE, row.names=NULL,
check.names=FALSE)
DS_prev2 <- DS_prev2[!is.na(DS_prev2$genes),]
DS_2v8 <- read.table("./resequenced_ds/2days_v_8days_cluster_significance.txt",sep="\t",header=TRUE, row.names=NULL,
check.names=FALSE)
DS_2v8 <- DS_2v8[!is.na(DS_2v8$genes),]
DS_8v16 <- read.table("./resequenced_ds/8days_v_16days_cluster_significance.txt",sep="\t",header=TRUE, row.names=NULL,
check.names=FALSE)
DS_8v16 <- DS_8v16[!is.na(DS_8v16$genes),]
sig_genes_DE_prev2 <- as.character(DE_prev2[DE_prev2$adj.P.Val < 0.05,]$rownames.dat.)
sig_genes_DE_2v8 <- as.character(DE_2v8[DE_2v8$adj.P.Val < 0.05,]$rownames.dat.)
sig_genes_DE_8v16 <- as.character(DE_8v16[DE_8v16$adj.P.Val < 0.05,]$rownames.dat.)
sig_genes_DS_prev2 <- as.character(DS_prev2[DS_prev2$p.adjust < 0.05,]$genes[!is.na(DS_prev2[DS_prev2$p.adjust < 0.05,]$genes)])
sig_genes_DS_2v8 <- as.character(DS_2v8[DS_2v8$p.adjust < 0.05,]$genes[!is.na(DS_2v8[DS_2v8$p.adjust < 0.05,]$genes)])
sig_genes_DS_8v16 <- as.character(DS_8v16[DS_8v16$p.adjust < 0.05,]$genes[!is.na(DS_8v16[DS_8v16$p.adjust < 0.05,]$genes)])
split_genes_DS_prev2 <- c()
for(i in 1:length(sig_genes_DS_prev2)){
if(grepl(",",sig_genes_DS_prev2[i])){
split_genes_DS_prev2 <- c(split_genes_DS_prev2,str_split_fixed(sig_genes_DS_prev2[i],",",n=Inf))
}
}
split_sig_genes_DS_prev2 <- c(sig_genes_DS_prev2[!grepl(",",sig_genes_DS_prev2)],split_genes_DS_prev2)
split_genes_DS_2v8 <- c()
for(i in 1:length(sig_genes_DS_2v8)){
if(grepl(",",sig_genes_DS_2v8[i])){
split_genes_DS_2v8 <- c(split_genes_DS_2v8,str_split_fixed(sig_genes_DS_2v8[i],",",n=Inf))
}
}
split_sig_genes_DS_2v8 <- c(sig_genes_DS_2v8[!grepl(",",sig_genes_DS_2v8)],split_genes_DS_2v8)
split_genes_DS_8v16 <- c()
for(i in 1:length(sig_genes_DS_8v16)){
if(grepl(",",sig_genes_DS_8v16[i])){
split_genes_DS_8v16 <- c(split_genes_DS_8v16,str_split_fixed(sig_genes_DS_8v16[i],",",n=Inf))
}
}
split_sig_genes_DS_8v16 <- c(sig_genes_DS_8v16[!grepl(",",sig_genes_DS_8v16)],split_genes_DS_8v16)
knitr::opts_chunk$set(echo = TRUE)
library(limma)
library(VennDiagram)
library(enrichR)
library(stringr)
library(ggplot2)
library(egg)
setwd("~/SGBS_splicing")
DE_prev2 <- read.table("./differential_expression/sgbs2vspre_all.txt", sep="\t", header=TRUE, row.names=NULL,
check.names=FALSE)
DE_2v8 <- read.table("./differential_expression/sgbs8vs2_all.txt", sep="\t", header=TRUE, row.names=NULL,
check.names=FALSE)
DE_8v16 <- read.table("./differential_expression/sgbs16vs8_all.txt", sep="\t", header=TRUE, row.names=NULL,
check.names=FALSE)
DS_prev2 <- read.table("./resequenced_ds/pre_v_2days_cluster_significance.txt",sep="\t",header=TRUE, row.names=NULL,
check.names=FALSE)
DS_prev2 <- DS_prev2[!is.na(DS_prev2$genes),]
DS_2v8 <- read.table("./resequenced_ds/2days_v_8days_cluster_significance.txt",sep="\t",header=TRUE, row.names=NULL,
check.names=FALSE)
DS_2v8 <- DS_2v8[!is.na(DS_2v8$genes),]
DS_8v16 <- read.table("./resequenced_ds/8days_v_16days_cluster_significance.txt",sep="\t",header=TRUE, row.names=NULL,
check.names=FALSE)
DS_8v16 <- DS_8v16[!is.na(DS_8v16$genes),]
sig_genes_DE_prev2 <- as.character(DE_prev2[DE_prev2$adj.P.Val < 0.05,]$rownames.dat.)
sig_genes_DE_2v8 <- as.character(DE_2v8[DE_2v8$adj.P.Val < 0.05,]$rownames.dat.)
sig_genes_DE_8v16 <- as.character(DE_8v16[DE_8v16$adj.P.Val < 0.05,]$rownames.dat.)
sig_genes_DS_prev2 <- as.character(DS_prev2[DS_prev2$p.adjust < 0.05,]$genes[!is.na(DS_prev2[DS_prev2$p.adjust < 0.05,]$genes)])
sig_genes_DS_2v8 <- as.character(DS_2v8[DS_2v8$p.adjust < 0.05,]$genes[!is.na(DS_2v8[DS_2v8$p.adjust < 0.05,]$genes)])
sig_genes_DS_8v16 <- as.character(DS_8v16[DS_8v16$p.adjust < 0.05,]$genes[!is.na(DS_8v16[DS_8v16$p.adjust < 0.05,]$genes)])
split_genes_DS_prev2 <- c()
for(i in 1:length(sig_genes_DS_prev2)){
if(grepl(",",sig_genes_DS_prev2[i])){
split_genes_DS_prev2 <- c(split_genes_DS_prev2,str_split_fixed(sig_genes_DS_prev2[i],",",n=Inf))
}
}
split_sig_genes_DS_prev2 <- c(sig_genes_DS_prev2[!grepl(",",sig_genes_DS_prev2)],split_genes_DS_prev2)
split_genes_DS_2v8 <- c()
for(i in 1:length(sig_genes_DS_2v8)){
if(grepl(",",sig_genes_DS_2v8[i])){
split_genes_DS_2v8 <- c(split_genes_DS_2v8,str_split_fixed(sig_genes_DS_2v8[i],",",n=Inf))
}
}
split_sig_genes_DS_2v8 <- c(sig_genes_DS_2v8[!grepl(",",sig_genes_DS_2v8)],split_genes_DS_2v8)
split_genes_DS_8v16 <- c()
for(i in 1:length(sig_genes_DS_8v16)){
if(grepl(",",sig_genes_DS_8v16[i])){
split_genes_DS_8v16 <- c(split_genes_DS_8v16,str_split_fixed(sig_genes_DS_8v16[i],",",n=Inf))
}
}
split_sig_genes_DS_8v16 <- c(sig_genes_DS_8v16[!grepl(",",sig_genes_DS_8v16)],split_genes_DS_8v16)
DS_prev2 <- read.table("./resequenced_ds/pre_v_2days_cluster_significance.txt",sep="\t",header=TRUE, row.names=NULL,
check.names=FALSE)
DS_prev2 <- DS_prev2[!is.na(DS_prev2$genes),]
DS_2v8 <- read.table("./resequenced_ds/2days_v_8days_cluster_significance.txt",sep="\t",header=TRUE, row.names=NULL,
check.names=FALSE)
DS_2v8 <- DS_2v8[!is.na(DS_2v8$genes),]
DS_8v16 <- read.table("./resequenced_ds/8days_v_16days_cluster_significance.txt",sep="\t",header=TRUE, row.names=NULL,
check.names=FALSE)
DS_8v16 <- DS_8v16[!is.na(DS_8v16$genes),]
sig_genes_DS_prev2 <- as.character(DS_prev2[DS_prev2$p.adjust < 0.05,]$genes[!is.na(DS_prev2[DS_prev2$p.adjust < 0.05,]$genes)])
sig_genes_DS_2v8 <- as.character(DS_2v8[DS_2v8$p.adjust < 0.05,]$genes[!is.na(DS_2v8[DS_2v8$p.adjust < 0.05,]$genes)])
sig_genes_DS_8v16 <- as.character(DS_8v16[DS_8v16$p.adjust < 0.05,]$genes[!is.na(DS_8v16[DS_8v16$p.adjust < 0.05,]$genes)])
split_genes_DS_prev2 <- c()
for(i in 1:length(sig_genes_DS_prev2)){
if(grepl(",",sig_genes_DS_prev2[i])){
split_genes_DS_prev2 <- c(split_genes_DS_prev2,str_split_fixed(sig_genes_DS_prev2[i],",",n=Inf))
}
}
split_sig_genes_DS_prev2 <- c(sig_genes_DS_prev2[!grepl(",",sig_genes_DS_prev2)],split_genes_DS_prev2)
split_genes_DS_2v8 <- c()
for(i in 1:length(sig_genes_DS_2v8)){
if(grepl(",",sig_genes_DS_2v8[i])){
split_genes_DS_2v8 <- c(split_genes_DS_2v8,str_split_fixed(sig_genes_DS_2v8[i],",",n=Inf))
}
}
split_sig_genes_DS_2v8 <- c(sig_genes_DS_2v8[!grepl(",",sig_genes_DS_2v8)],split_genes_DS_2v8)
split_genes_DS_8v16 <- c()
for(i in 1:length(sig_genes_DS_8v16)){
if(grepl(",",sig_genes_DS_8v16[i])){
split_genes_DS_8v16 <- c(split_genes_DS_8v16,str_split_fixed(sig_genes_DS_8v16[i],",",n=Inf))
}
}
split_sig_genes_DS_8v16 <- c(sig_genes_DS_8v16[!grepl(",",sig_genes_DS_8v16)],split_genes_DS_8v16)
all_DS_genes <- union(split_sig_genes_DS_2v8, union(split_sig_genes_DS_8v16,split_sig_genes_DS_prev2))
head(all_DS_genes)
UCSC_exon_coords <- read.table("./poison_exons/UCSC_exon_coords.txt",sep="\t",header=TRUE, row.names=NULL,
check.names=FALSE)
UCSC_exon_coords <- read.table("./poison_exons/UCSC_exon_coords.txt",sep="\t",header=TRUE, row.names=NULL,
check.names=FALSE)
head(UCSC_exon_coords)
# generated from: http://genome.ucsc.edu/cgi-bin/hgTables
# with options: Mammal, Human, hg19, Genes and Gene Predictions, UCSC Genes, knownGene, genome, selected fields from primary and related tables
UCSC_exon_coords <- read.table("./poison_exons/UCSC_exon_coords.txt",sep="\t",header=FALSE, row.names=NULL,
check.names=FALSE)
head(UCSC_exon_coords)
?read.table
?read.table
# generated from: http://genome.ucsc.edu/cgi-bin/hgTables
# with options: Mammal, Human, hg19, Genes and Gene Predictions, UCSC Genes, knownGene, genome, selected fields from primary and related tables
UCSC_exon_coords <- read.table("./poison_exons/UCSC_exon_coords.txt",sep="\t",header=FALSE, row.names=NULL,
check.names=FALSE,comment.char = NA)
# generated from: http://genome.ucsc.edu/cgi-bin/hgTables
# with options: Mammal, Human, hg19, Genes and Gene Predictions, UCSC Genes, knownGene, genome, selected fields from primary and related tables
UCSC_exon_coords <- read.table("./poison_exons/UCSC_exon_coords.txt",sep="\t",header=FALSE, row.names=NULL,
check.names=FALSE,comment.char = "")
head(UCSC_exon_coords)
# generated from: http://genome.ucsc.edu/cgi-bin/hgTables
# with options: Mammal, Human, hg19, Genes and Gene Predictions, UCSC Genes, knownGene, genome, selected fields from primary and related tables
UCSC_exon_coords <- read.table("./poison_exons/UCSC_exon_coords.txt",sep="\t",header=TRUE, row.names=NULL,
check.names=FALSE,comment.char = "")
head(UCSC_exon_coords)
sum(all_DS_genes %in% UCSC_exon_coords$hg19.kgXref.geneSymbol)
all_DS_genes[!(all_DS_genes %in% UCSC_exon_coords$hg19.kgXref.geneSymbol)]
sum(UCSC_exon_coords$hg19.kgXref.geneSymbol %in% all_DS_genes)
sum(unique(UCSC_exon_coords$hg19.kgXref.geneSymbol) %in% all_DS_genes)
UCSC_DS_exon_coords <- UCSC_exon_coords[UCSC_exon_coords$hg19.kgXref.geneSymbol %in% all_DS_genes,]
12441/2482
View(UCSC_exon_coords)
head(UCSC_exon_coords$hg19.knownGene.txStart)
sum((UCSC_exon_coords$hg19.knownGene.txStart - UCSC_exon_coords$hg19.knownGene.txEnd) > 0)
head(UCSC_DS_exon_coords)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/SGBS_splicing")
library(tidyr)
library(dplyr)
test <- "test1,test2"
this <- "this1,this2"
strsplit(test)
strsplit(test,",")
c(strsplit(test,","),strsplit(this,",")
)
paste(strsplit(test,","),strsplit(this,","))
?sapply
sapply(c(strsplit(test,","),strsplit(this,",")),function(x) paste(x[[1]][1],x[[2]][1]))
a <- c(strsplit(test,","),strsplit(this,","))
a[[2]]
a[[2]][1]
a[[1]]
a[[1]][1]
sapply(a,function(a) paste(x[[1]][1],x[[1]][2]))
sapply(a,function(x) paste(x[[1]][1],x[[1]][2]))
sapply(a,function(x) paste(x[1],x[2]))
a <- strsplit(test,",")
b <- strsplit(this,",")
head(UCSC_DS_exon_coords)
UCSC_DS_exon_coords %>% separate_rows(hg19.knownGene.exonStarts,hg19.knownGene.exonEnds)
test <- UCSC_DS_exon_coords %>% separate_rows(hg19.knownGene.exonStarts,hg19.knownGene.exonEnds)
head(test)
View(test)
# generated from: http://genome.ucsc.edu/cgi-bin/hgTables
# with options: Mammal, Human, hg19, Genes and Gene Predictions, UCSC Genes, knownGene, genome, selected fields from primary and related tables
UCSC_exon_coords <- read.table("./poison_exons/UCSC_exon_coords.txt",sep="\t",header=TRUE, row.names=NULL,
check.names=FALSE,comment.char = "")
UCSC_DS_exon_coords <- UCSC_exon_coords[UCSC_exon_coords$hg19.kgXref.geneSymbol %in% all_DS_genes,]
UCSC_DS_exon_coords_split <- UCSC_DS_exon_coords %>% separate_rows(hg19.knownGene.exonStarts,hg19.knownGene.exonEnds)
View(UCSC_DS_exon_coords_split)
head(UCSC_DS_exon_coords)
UCSC_DS_exon_coords_split$hg19.knownGene.exonEnds[24]
is.na(UCSC_DS_exon_coords_split$hg19.knownGene.exonEnds[24])
UCSC_DS_exon_coords_split$hg19.knownGene.exonEnds[24] == ""
UCSC_DS_exon_coords_split$hg19.knownGene.exonEnds[23] == ""
UCSC_DS_exon_coords_split <- UCSC_DS_exon_coords_split[UCSC_DS_exon_coords_split$hg19.knownGene.exonStarts != "",]
UCSC_DS_exon_coords_split <- UCSC_DS_exon_coords %>% separate_rows(hg19.knownGene.exonStarts,hg19.knownGene.exonEnds)
UCSC_DS_exon_coords_split <- UCSC_DS_exon_coords_split[UCSC_DS_exon_coords_split$hg19.knownGene.exonStarts != "",]
151575 - 139134
UCSC_DS_exon_coords_split$name <- paste(UCSC_DS_exon_coords_split[1,],UCSC_DS_exon_coords_split$hg19.kgXref.geneSymbol,
UCSC_DS_exon_coords_split$hg19.knownGene.exonStarts,UCSC_DS_exon_coords_split$hg19.knownGene.exonEnds,
sep=":")
head(UCSC_DS_exon_coords_split)
head(UCSC_DS_exon_coords_split[1,])
head(UCSC_DS_exon_coords_split[,1])
UCSC_DS_exon_coords_split$name <- paste(UCSC_DS_exon_coords_split[,1],UCSC_DS_exon_coords_split$hg19.kgXref.geneSymbol,
UCSC_DS_exon_coords_split$hg19.knownGene.exonStarts,UCSC_DS_exon_coords_split$hg19.knownGene.exonEnds,
sep=":")
head(UCSC_DS_exon_coords_split)
UCSC_DS_exon_coords_split$dummy <- rep(1,nrow(UCSC_DS_exon_coords_split))
UCSC_DS_exon_coords_bed <- UCSC_DS_exon_coords_split %>% select(hg19.knownGene.chrom,hg19.knownGene.exonStarts,hg19.knownGene.exonEnds,name,
dummy,strand)
UCSC_DS_exon_coords_bed <- UCSC_DS_exon_coords_split %>% select(hg19.knownGene.chrom,hg19.knownGene.exonStarts,hg19.knownGene.exonEnds,name,
dummy,hg19.knownGene.strand)
head(UCSC_DS_exon_coords_bed)
View(UCSC_DS_exon_coords)
write.table(UCSC_DS_exon_coords_bed,"./poison_exons/UCSC_DS_exon_coords.bed", quote=FALSE, sep="\t",row.names=FALSE,col.names=FALSE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DEXSeq")
setwd("C:/Users/kmfar/Desktop/HGen_GWAS_tutorial/doc")
source("http://bioconductor.org/biocLite.R")
biocLite("snpStats")
data.dir <- "../data"
out.dir <- "../results"
data.dir <- "../data"
out.dir <- "../results"
?cache
data.dir <- "../data"
out.dir <- "../results"
gwas.fn <- lapply(c(bed='bed',bim='bim',fam='fam',gds='gds'), function(n) sprintf("%s/GWAStutorial.%s", data.dir, n))
clinical.fn <- sprintf("%s/GWAStutorial_clinical.csv", data.dir)
onethou.fn <- lapply(c(info='info',ped='ped'), function(n) sprintf("%s/chr16_1000g_CEU.%s", data.dir, n))
protein.coding.coords.fname <- sprintf("%s/ProCodgene_coords.csv", data.dir)
gwas.fn
clinical.fn
data.dir <- "../data"
out.dir <- "../results"
gwas.fn <- lapply(c(bed='bed',bim='bim',fam='fam',gds='gds'), function(n) sprintf("%s/GWAStutorial.%s", data.dir, n))
clinical.fn <- sprintf("%s/GWAStutorial_clinical.csv", data.dir)
onethou.fn <- lapply(c(info='info',ped='ped'), function(n) sprintf("%s/chr16_1000g_CEU.%s", data.dir, n))
protein.coding.coords.fname <- sprintf("%s/ProCodgene_coords.csv", data.dir)
gwaa.fname <- sprintf("%s/GWAStutorialout.txt", out.dir)
gwaa.unadj.fname <- sprintf("%s/GWAStutorialoutUnadj.txt", out.dir)
impute.out.fname <- sprintf("%s/GWAStutorial_imputationOut.csv", out.dir)
CETP.fname <- sprintf("%s/CETP_GWASout.csv", out.dir)
gwass.fname
gwaa.fname
# setting our data and output
data.dir <- "../data"
out.dir <- "../results"
gwas_files <-
gwas.fn <- lapply(c(bed='bed',bim='bim',fam='fam',gds='gds'), function(n) sprintf("%s/GWAStutorial.%s", data.dir, n))
clinical.fn <- sprintf("%s/GWAStutorial_clinical.csv", data.dir)
onethou.fn <- lapply(c(info='info',ped='ped'), function(n) sprintf("%s/chr16_1000g_CEU.%s", data.dir, n))
protein.coding.coords.fname <- sprintf("%s/ProCodgene_coords.csv", data.dir)
gwaa.fname <- sprintf("%s/GWAStutorialout.txt", out.dir)
gwaa.unadj.fname <- sprintf("%s/GWAStutorialoutUnadj.txt", out.dir)
impute.out.fname <- sprintf("%s/GWAStutorial_imputationOut.csv", out.dir)
CETP.fname <- sprintf("%s/CETP_GWASout.csv", out.dir)
geno <- read.plink("../data/GWAStutorial.bed", "../data/GWAStutorial.bim", "../data/GWAStutorial.fam", na.strings = ("-9"))
library(snpStats)
geno <- read.plink("../data/GWAStutorial.bed", "../data/GWAStutorial.bim", "../data/GWAStutorial.fam", na.strings = ("-9"))
geno
head(genoytpes)
head(geno)
summary(geno)
?read.plink
head(genotypes$fam)
head(geno$fam)
head(geno$genotypes)
genotypes <- read.plink("../data/GWAStutorial.bed", "../data/GWAStutorial.bim", "../data/GWAStutorial.fam", na.strings = ("-9"))
summary(genotypes)
head(genotypes$fam)
head(genotypes$map)
plink_data <- read.plink("../data/GWAStutorial.bed", "../data/GWAStutorial.bim", "../data/GWAStutorial.fam", na.strings = ("-9"))
summary(plink_data)
head(plink_data$fam)
head(plink_data$map)
clinical.fn
head(geno$fam)
genotype_data <- read.plink("../data/GWAStutorial.bed", "../data/GWAStutorial.bim", "../data/GWAStutorial.fam", na.strings = ("-9"))
summary(genotype_data)
head(genotype_data$fam)
head(genotype_data$map)
clinical.fn
clinical_data <- read.csv("../data/GWAStutorial_clinical.csv", colClasses=c("character", "factor", "factor", rep("numeric", 4)))
rownames(clinical_data) <- clinical_data$FamID
head(clinical_data)
snp_summary <- col.summary(genotype_data$genotypes)
head(snp_summary)
call_rate_threshold <- 0.95
maf_threshold <- 0.01
# Filter on MAF and call rate
use <- with(snpsum.col, (!is.na(MAF) & MAF > minor) & Call.rate >= call)
call_rate_threshold <- 0.95
maf_threshold <- 0.01
# Filter on MAF and call rate
use <- with(snp_summary, (!is.na(MAF) & MAF > minor) & Call.rate >= call)
call_rate_threshold <- 0.95
maf_threshold <- 0.01
# Filter on MAF and call rate
use <- with(snp_summary, (!is.na(MAF) & MAF > maf_threshold) & Call.rate >= call_rate_threshold)
use[is.na(use)] <- FALSE                # Remove NA's as well
cat(ncol(genotype_data$genotypes)-sum(use),"SNPs will be removed due to low MAF or call rate.\n") #203287 SNPs will be removed
?with
library(dplyr)
use <- with(snp_summary, (!is.na(MAF) & MAF > maf_threshold) & Call.rate >= call_rate_threshold)
head(use)
is.na(use)
keep_SNPs <- snp_summary %>%
filter(!is.na(MAF), MAF > maf_threshold) %>%
filter(Call.rate >= call_rate_threshold)
head(keep_SNPs)
ncol(genotype_data$genotypes) - nrow(keep_SNPs)
head(snp_summary)
keep_SNPs <- snp_summary %>%
rownames_to_column('rsID') %>%
filter(!is.na(MAF), MAF > maf_threshold) %>%
filter(Call.rate >= call_rate_threshold) %>%
column_to_rownames('rsID)
''
'
keep_SNPs <- snp_summary %>%
rownames_to_column('rsID') %>%
filter(!is.na(MAF), MAF > maf_threshold) %>%
filter(Call.rate >= call_rate_threshold) %>%
column_to_rownames('rsID')
library(tibble)
keep_SNPs <- snp_summary %>%
rownames_to_column('rsID') %>%
filter(!is.na(MAF), MAF > maf_threshold) %>%
filter(Call.rate >= call_rate_threshold) %>%
column_to_rownames('rsID')
head(keep_SNPs)
ncol(genotype_data$genotypes) - nrow(keep_SNPs)
keep_SNPs_logical <- rownames(snp_summary) %in% rownames(keep_SNPs)
sum(keep_SNPs_logical == use)
sum(keep_SNPs_logical != use)
call_rate_threshold <- 0.95
maf_threshold <- 0.01
# Filter on MAF and call rate
keep_SNPs <- snp_summary %>%
rownames_to_column('rsID') %>%
filter(!is.na(MAF), MAF > maf_threshold) %>%
filter(Call.rate >= call_rate_threshold) %>%
column_to_rownames('rsID')
keep_SNPs_logical <- rownames(snp_summary) %in% rownames(keep_SNPs)
sum(!keep_SNPs_logical)
call_rate_threshold <- 0.95
maf_threshold <- 0.01
# Filter on MAF and call rate
keep_SNPs <- snp_summary %>%
rownames_to_column('rsID') %>%
filter(!is.na(MAF), MAF > maf_threshold) %>%
filter(Call.rate >= call_rate_threshold) %>%
column_to_rownames('rsID')
# convert our dataframe of SNPs to keep to a logical vector with TRUE if a SNP should be kept and FALSE if not
keep_SNPs_logical <- rownames(snp_summary) %in% rownames(keep_SNPs)
# we can check how many SNPs we're removing with these filters
sum(!keep_SNPs_logical)
# now we'll subset our genotype and SNP summary data to only keep the SNPs that passed our filters
genotype_data$genotypes <- genotype_data$genotypes[,keep_SNPs_logical]
snp_summary <- snp_summary[keep_SNPs_logical,]
print(genotype_data$genotypes)
library(SNPRelate)                      # LD pruning, relatedness, PCA
library(plyr)
install.packages('SNPRelate')
library(SNPRelate)                      # LD pruning, relatedness, PCA
library(plyr)
source("http://bioconductor.org/biocLite.R")
biocLite("snpStats")
library(SNPRelate)
library(SNPRelate)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SNPRelate")
library(SNPRelate)
sample_summary <- row.summary(genotype_data$genotypes)
head(sample_summary)
sample_summary <- row.summary(genotype_data$genotypes)
head(sample_summary)
# compute the inbreeding coefficient as defined above and add it to our summary dataframe
MAF <- snp_summary$MAF
called_genotypes <- !is.na(genotype_data$genotypes)
het_expectation <- called_genotypes %*% (2*MAF*(1-MAF))
het_observation <- with(sample_summary,Heterozygosity*(ncol(genotype_data$genotypes))*Call.rate)
sample_summary$inbreeding <- 1-(het_observation/het_expectation)
head(sample_summary)
head(sample_summary)
sample_summary$inbreeding_coef <- 1-(het_observation/het_expectation)
head(sample_summary)
# filter on call rate and heterozygosity with the thresholds defined above
sample_call_rate_threshold <- 0.95
het_threshold <- 0.1
keep_samples <- sample_summary %>%
rownames_to_column("sampleID") %>%
filter(!is.na(Call.rate),Call.rate > sample_call_rate_threshold) %>%
filter(abs(inbreeding_coef) <= het_threshold) %>%
column_to_rownames("sampleID")
# convert our dataframe of samples to keep to a logical vector with TRUE if a sample should be kept and FALSE if not
keep_samples_logical <- rownames(sample_summary) %in% rownames(keep_samples)
# we can check how many SNPs we're removing with these filters
sum(!keep_samples_logical)
gwas.fn
ld_threshold <- 0.2
kinship_threshold <- 0.1
snpgdsBED2GDS("../data/GWAStutorial.bed", "../data/GWAStutorial.fam", "../data/GWAStutorial.bim", "../data/GWAStutorial.gds")
?openfn.gds
# we'll now clean up the GDS file a bit and prune our SNPs
genotype_data_GDS <- openfn.gds("../data/GWAStutorial.gds", readonly=FALSE)
# Automatically added "-1" sample suffixes are removed
gds_ids <- read.gdsn(index.gdsn(genotype_data_GDS, "sample.id"))
gds_ids <- sub("-1", "", gds.ids)
# we'll now clean up the GDS file a bit and prune our SNPs
genotype_data_GDS <- openfn.gds("../data/GWAStutorial.gds", readonly=FALSE)
ld_threshold <- 0.2
kinship_threshold <- 0.1
snpgdsBED2GDS("../data/GWAStutorial.bed", "../data/GWAStutorial.fam", "../data/GWAStutorial.bim", "../data/GWAStutorial.gds")
# we'll now clean up the GDS file a bit and prune our SNPs
genotype_data_GDS <- openfn.gds("../data/GWAStutorial.gds", readonly=FALSE)
